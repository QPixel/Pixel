import { Client, MessageEmbed } from 'discord.js';
import { prefix } from '../util/env';
import { CommandNotFound, Discord, CommandMessage, Command, On, ArgsOf } from '@typeit/discord';
import * as Path from 'path';
import Endpoints from '../util/endpoints';
import axios from 'axios';
import { Auth } from '../lib/oldAuth';
import { parseManifest } from '../util/pullManifest';

@Discord(prefix)
abstract class DiscordApp {
  @On('ready')
  private async onReady(client: Client) {
    const { buildNumber } = await parseManifest();
    console.log('Connected as ' + client.user.tag);
    client.user.setActivity(buildNumber);
  }
  @Command('getauth')
  async getauth(command: CommandMessage) {
    const token = Auth.accessToken;
    const res = '```' + token + '```';
    return command.channel.send(res);
  }

  @Command('checkstaging')
  async checkStaging(command: CommandMessage) {
    const res = await axios.get(Endpoints.STAGING_API).then((response) => {
      return response;
    });
    const embed = new MessageEmbed()
      .setTitle('Fortnite INFO')
      .setColor('#0099ff')
      .setDescription('RESPONSE was ' + res.status)
      .addField('Server Date', '```' + res.data.serverDate + '```')
      .addField('cln', '```' + res.data.cln + '```')
      .addField('Build', '```' + res.data.build + '```')
      .addField('Version', '```' + res.data.version + '```')
      .addField('Branch', '```' + res.data.branch + '```')
      .setTimestamp()
      .setFooter('Pixel, a discord bot. made by QPixel');
    command.channel.send(embed);
  }
  @CommandNotFound()
  notFoundA(command: CommandMessage) {
    command.reply('Command not found');
  }
}
